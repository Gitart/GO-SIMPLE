// [_Флаги командной строки_](http://en.wikipedia.org/wiki/Command-line_interface#Command-line_option)
// это популярный способ указывать опции для консольных программ.
// К примеру, в команде `wc -l` `-l` является флагом командной строки.

package main

// В Go есть пакет `flag`, обеспечивающий базовые функции
// для работы с флагами. Мы будем использовать этот пакет
// для нашей демонстрационной консольной программы.
import "flag"
import "fmt"

func main() {

    // Базовые определения флагов доступны для типов
    // string, integer и boolean. Тут мы определяем
    // флаг-строку `word` со значением по-умолчанию
    // `"foo"` и коротким описанием. Функция `flag.String`
    // возвращает указатель на строку (а не саму строку);
    // мы посмотрим, как использовать этот указатель ниже.
    wordPtr := flag.String("word", "foo", "a string")

    // Тут мы декларируем флаги `numb` и `fork`, используя
    // аналогичный подход, как и с флагом `word`.
    numbPtr := flag.Int("numb", 42, "an int")
    boolPtr := flag.Bool("fork", false, "a bool")

    // Также флаги можно определять, используя
    // существующую переменную, объявленную ранее в программе.
    // Обратите внимание, что мы передаем в функцию указатель.
    var svar string
    flag.StringVar(&svar, "svar", "bar", "a string var")

    // Как только все флаги определены, вызываем
    // `flag.Parse()`, чтобы выполнить непосредственно
    // разбор командной строки.
    flag.Parse()

    // Тут мы выводим на экран считанные значения флагов,
    // и оставшиеся аргументы командной строки. Обратите
    // внимание. что мы должны разыменовывать указатель,
    // `*wordPtr`, например, чтобы получить реальные значения.
    fmt.Println("word:", *wordPtr)
    fmt.Println("numb:", *numbPtr)
    fmt.Println("fork:", *boolPtr)
    fmt.Println("svar:", svar)
    fmt.Println("tail:", flag.Args())
}
