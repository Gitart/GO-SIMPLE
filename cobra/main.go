package main

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	//"github.com/spf13/cobra/doc"
)

var (
	EchoTimes  int
	EchoOther  string
	EchoOthers string
	ArgsTitle  []string
	DevType    string

	// AppName Global variables
	AppName    string = "informer"
	AppVersion string = "v.001.1"
)

func main() {

	// For documentation
	//header := &doc.GenManHeader{
	//	Title:   "MINE",
	//	Section: "3",
	//}

	// Dev mode
	var devType = &cobra.Command{
		Version: "v1.7",
		Example: "ct dev D",
		Use:     "dev",
		Short:   "Dev mode",
		Long:    `Development or production type`,
		Args:    cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			DevType = args[0]
			//fmt.Println("MODE Develop : " + strings.Join(args, " "))
		},
	}

	// Other
	var cmdOther = &cobra.Command{
		Version: AppVersion,
		Example: "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
		Use:     "other",
		Short:   "–ü—Ä–æ—á–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è",
		Long:    `–ü—Ä–æ—á–µ–µ –ø—Ä–∏–º–µ—Ä`,
		Args:    cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			EchoOther = args[0]
		},
	}

	// üìÉ Print
	// print "–ü–µ—Ä–≤—ã–π –∞—Ä–≥" "–í—Ç–æ—Ä–æ–π –∞—Ä–≥"
	var cmdPrint = &cobra.Command{
		Use:   "print",
		Short: "–ü–µ—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∞—è",
		Long:  `–ü–µ—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä`,
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			ArgsTitle = args
			fmt.Println("Print: " + strings.Join(args, " "))
		},
	}

	// ct echo testecho
	var cmdEcho = &cobra.Command{
		Use:   "echo",
		Short: "–≠—Ö–æ –∫–æ—Ä–æ—Ç–∫–∞—è",
		Long:  `–≠—Ö–æ - —ç—Ç–æ echo is for echoing anything back. Echo works a lot like print, except it has a child command.`,
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("–≠—Ö–æ : " + strings.Join(args, " "))
		},
	}

	// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	// ct echo tim 1
	var cmdTimes = &cobra.Command{
		Use:   "tim",
		Short: "–í—Ä–µ–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
		Long:  `–í—Ä–µ–º—è echo things multiple times back to the user by providing a count and a string.`,
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			for i := 0; i < EchoTimes; i++ {
				fmt.Println("–≠—Ö–æ: " + strings.Join(args, " "))
			}
		},
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
	// Used:  echo tim -t 33344
	cmdTimes.Flags().IntVarP(&EchoTimes, "tim", "t", 10, "times to echo the input")

	// Used:  echo -e testechoexample
	cmdEcho.Flags().StringVarP(&EchoOther, "echo", "e", "EchoTitle", "echo for input")

	// –î–ª—è ct - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	// –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —Ç–∞–∫–æ–µ –∏–º—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	var rootCmd = &cobra.Command{Use: AppName}
	rootCmd.AddCommand(cmdPrint, cmdEcho, cmdOther, devType)

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —Åmdecho
	cmdEcho.AddCommand(cmdTimes)

	// –ó–∞–ø—É—Å–∫
	rootCmd.Execute()

	// Test
	fmt.Println(EchoTimes)
	fmt.Println(EchoOther)
	fmt.Println(ArgsTitle)

	if DevType == "D" {
		fmt.Println("DEV MODE")
	}

	if DevType == "P" {
		fmt.Println("PRODUCTION MODE: READY ")
	}

	if DevType == "S" {
		fmt.Println("TRACE MODE üí°")
	}

	// Documentation

	//out := new(bytes.Buffer)
	//cobra.CheckErr(doc.GenMan(cmdTimes, header, out))
	//fmt.Print(out.String())
}
